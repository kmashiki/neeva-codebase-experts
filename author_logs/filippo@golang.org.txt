commit 8384fe86a5b7f579a50c7ad423d4dd4eb2d1f117
Author: Filippo Valsorda <filippo@golang.org>
Date:   Sat Oct 30 00:27:51 2021 -0400

    crypto/ecdsa,crypto/elliptic: update docs and spec references
    
    crypto/ecdsa was long overdue a cleanup. Bump the FIPS 186 version, and
    make sure we consistently reference that and SEC 1, not the paywalled
    ANSI standard.
    
    Change-Id: Idd90bd6c14b334941fdcd829d89b796a60a8b174
    Reviewed-on: https://go-review.googlesource.com/c/go/+/352529
    Run-TryBot: Filippo Valsorda <filippo@golang.org>
    Trust: Filippo Valsorda <filippo@golang.org>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Roland Shoemaker <roland@golang.org>

 src/crypto/ecdsa/ecdsa.go | 95 +++++++++++++++++++++++++----------------------
 1 file changed, 50 insertions(+), 45 deletions(-)

commit 0a5ca2422f14f9c17a017207feb9f83f94ce0e89
Author: Filippo Valsorda <filippo@golang.org>
Date:   Mon Sep 27 14:40:06 2021 -0400

    crypto/ecdsa: draw a fixed amount of entropy while signing
    
    The current code, introduced in CL 2422, mixes K bits of entropy with
    the private key and message digest to generate the signature nonce,
    where K is half the bit size of the curve. While the ECDLP complexity
    (and hence security level) of a curve is half its bit size, the birthday
    bound on K bits is only K/2. For P-224, this means we should expect a
    collision after 2^56 signatures over the same message with the same key.
    
    A collision, which is unlikely, would still not be a major practical
    concern, because the scheme would fall back to a secure deterministic
    signature scheme, and simply leak the fact that the two signed messages
    are the same (which is presumably already public).
    
    Still, we can simplify the code and remove the eventuality by always
    drawing 256 bits of entropy.
    
    Change-Id: I58097bd3cfc9283503e38751c924c53d271af92b
    Reviewed-on: https://go-review.googlesource.com/c/go/+/352530
    Trust: Filippo Valsorda <filippo@golang.org>
    Run-TryBot: Filippo Valsorda <filippo@golang.org>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Roland Shoemaker <roland@golang.org>

 src/crypto/ecdsa/ecdsa.go | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

commit 1108cbe60b87196ce739ff8bce08c9862d6b61f0
Author: Filippo Valsorda <filippo@golang.org>
Date:   Fri Apr 30 23:10:26 2021 -0400

    crypto/ecdsa,crypto/elliptic: improve tests and benchmarks
    
    Ensured all tests and benchmarks run over all curves.
    
    Change-Id: Idcbe14a50c60ff6c2cd56793bced6b428d049c39
    Reviewed-on: https://go-review.googlesource.com/c/go/+/315272
    Trust: Filippo Valsorda <filippo@golang.org>
    Trust: Katie Hockman <katie@golang.org>
    Run-TryBot: Filippo Valsorda <filippo@golang.org>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Katie Hockman <katie@golang.org>
    Reviewed-by: Roland Shoemaker <roland@golang.org>

 src/crypto/ecdsa/ecdsa_s390x.go      |   6 +
 src/crypto/ecdsa/ecdsa_s390x_test.go |  19 ++-
 src/crypto/ecdsa/ecdsa_test.go       | 284 ++++++++++++++++++-----------------
 3 files changed, 159 insertions(+), 150 deletions(-)

commit a8e83d51a0cc709c836fe8836b10155342aa2ac4
Author: Filippo Valsorda <filippo@golang.org>
Date:   Thu Apr 30 23:52:48 2020 -0400

    crypto/rsa,crypto/ecdsa,crypto/ed25519: implement PrivateKey.Equal
    
    Fixes #38190
    
    Change-Id: I10766068ee18974e81b3bd78ee0b4d83cc9d1a8c
    Reviewed-on: https://go-review.googlesource.com/c/go/+/231417
    Run-TryBot: Filippo Valsorda <filippo@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Katie Hockman <katie@golang.org>

 src/crypto/ecdsa/ecdsa.go      | 14 ++++++++++++++
 src/crypto/ecdsa/equal_test.go | 17 +++++++++++++----
 2 files changed, 27 insertions(+), 4 deletions(-)

commit b5f2c0f50297fa5cd14af668ddd7fd923626cf8c
Author: Filippo Valsorda <filippo@golang.org>
Date:   Tue Mar 17 20:34:51 2020 -0400

    crypto/rsa,crypto/ecdsa,crypto/ed25519: implement PublicKey.Equal
    
    This makes all modern public keys in the standard library implement a
    common interface (below) that can be used by applications for better
    type safety and allows for checking that public (and private keys via
    Public()) are equivalent.
    
    interface {
        Equal(crypto.PublicKey) bool
    }
    
    Equality for ECDSA keys is complicated, we take a strict interpretation
    that works for all secure applications (the ones not using the
    unfortunate non-constant time CurveParams implementation) and fails
    closed otherwise.
    
    Tests in separate files to make them x_tests and avoid an import loop
    with crypto/x509.
    
    Re-landing of CL 223754. Dropped the test that was assuming named curves
    are not implemented by CurveParams, because it's not true for all
    curves, and anyway is not a property we need to test. There is still a
    test to check that different curves make keys not Equal.
    
    Fixes #21704
    Fixes #38035
    
    Reviewed-on: https://go-review.googlesource.com/c/go/+/223754
    Reviewed-by: Katie Hockman <katie@golang.org>
    Change-Id: I736759b145bfb4f7f8eecd78c324315d5a05385c
    Reviewed-on: https://go-review.googlesource.com/c/go/+/225460
    Run-TryBot: Filippo Valsorda <filippo@golang.org>
    Run-TryBot: Bryan C. Mills <bcmills@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>

 src/crypto/ecdsa/ecdsa.go      | 18 ++++++++++++
 src/crypto/ecdsa/equal_test.go | 66 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 84 insertions(+)

commit 5c9bd499e103709a181f7a1a895d221ae6e7ffc8
Author: Filippo Valsorda <filippo@golang.org>
Date:   Tue Mar 17 20:34:51 2020 -0400

    crypto/rsa,crypto/ecdsa,crypto/ed25519: implement PublicKey.Equal
    
    This makes all modern public keys in the standard library implement a
    common interface (below) that can be used by applications for better
    type safety and allows for checking that public (and private keys via
    Public()) are equivalent.
    
    interface {
        Equal(crypto.PublicKey) bool
    }
    
    Equality for ECDSA keys is complicated, we take a strict interpretation
    that works for all secure applications (the ones not using the
    unfortunate non-constant time CurveParams implementation) and fails
    closed otherwise.
    
    Tests in separate files to make them x_tests and avoid an import loop
    with crypto/x509.
    
    Fixes #21704
    
    Change-Id: Id5379c96384a11c5afde0614955360e7470bb1c4
    Reviewed-on: https://go-review.googlesource.com/c/go/+/223754
    Reviewed-by: Katie Hockman <katie@golang.org>

 src/crypto/ecdsa/ecdsa.go      | 18 ++++++++++
 src/crypto/ecdsa/equal_test.go | 77 ++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 95 insertions(+)
