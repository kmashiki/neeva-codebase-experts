commit 6269dcdc24d74379d8a609ce886149811020b2cc
Author: Adam Langley <agl@golang.org>
Date:   Mon Sep 18 14:49:21 2017 -0700

    crypto: randomly read an extra byte of randomness in some places.
    
    Code has ended up depending on things like RSA's key generation being
    deterministic given a fixed random Reader. This was never guaranteed and
    would prevent us from ever changing anything about it.
    
    This change makes certain calls randomly (based on the internal
    fastrand) read an extra byte from the random Reader. This helps to
    ensure that code does not depend on internal details.
    
    I've not added this call in the key generation of ECDSA and DSA because,
    in those cases, key generation is so obvious that it probably is
    acceptable to do the obvious thing and not worry about code that depends
    on that.
    
    This does not affect tests that use a Reader of constant bytes (e.g. a
    zeroReader) because shifting such a stream is a no-op. The stdlib uses
    this internally (which is fine because it can be atomically updated if
    the crypto libraries change).
    
    It is possible that external tests could be doing the same and would
    thus break if we ever, say, tweaked the way RSA key generation worked.
    I feel that addressing that would be more effort than it's worth.
    
    Fixes #21915
    
    Change-Id: I84cff2e249acc921ad6eb5527171e02e6d39c530
    Reviewed-on: https://go-review.googlesource.com/64451
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    Run-TryBot: Brad Fitzpatrick <bradfitz@golang.org>

 src/crypto/ecdsa/ecdsa.go | 4 ++++
 1 file changed, 4 insertions(+)

commit 507ca082d116c19cbe5cbdd457e6b37d851d2341
Author: Adam Langley <agl@golang.org>
Date:   Sat Oct 14 11:43:17 2017 -0700

    crypto/{ecdsa,rsa}: rename argument to PrivateKey.Sign.
    
    The crypto.Signer interface takes pre-hased messages for ECDSA and RSA,
    but the argument in the implementations was called “msg”, not “digest”,
    which is confusing.
    
    This change renames them to help clarify the intended use.
    
    Change-Id: Ie2fb8753ca5280e493810d211c7c66223f94af88
    Reviewed-on: https://go-review.googlesource.com/70950
    Reviewed-by: Filippo Valsorda <hi@filippo.io>

 src/crypto/ecdsa/ecdsa.go | 15 +++++++++------
 1 file changed, 9 insertions(+), 6 deletions(-)

commit 2d69e9e259ec0f5d5fbeb3498fbd9fed135fe869
Author: Adam Langley <agl@golang.org>
Date:   Wed May 3 18:20:12 2017 -0700

    crypto/elliptic: fix incomplete addition used in CombinedMult.
    
    The optimised P-256 includes a CombinedMult function, which doesn't do
    dual-scalar multiplication, but does avoid an affine conversion for
    ECDSA verification.
    
    However, it currently uses an assembly point addition function that
    doesn't handle exceptional cases.
    
    Fixes #20215.
    
    Change-Id: I4ba2ca1a546d883364a9bb6bf0bdbc7f7b44c94a
    Reviewed-on: https://go-review.googlesource.com/42611
    Run-TryBot: Adam Langley <agl@golang.org>
    Reviewed-by: Adam Langley <agl@golang.org>

 src/crypto/ecdsa/ecdsa_test.go | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

commit 998419575fb34dd5228cfdb353a73184e29db8da
Author: Adam Langley <agl@golang.org>
Date:   Fri Sep 30 14:48:11 2016 -0700

    crypto/ecdsa: correct code comment.
    
    The code comment mixed up max and min. In this case, min is correct
    because this entropy is only used to make the signature scheme
    probabilistic. (I.e. if it were fixed then the scheme would still be
    secure except that key.Sign(foo) would always give the same result for a
    fixed key and foo.)
    
    For this purpose, 256-bits is plenty.
    
    Fixes #16819.
    
    Change-Id: I309bb312b775cf0c4b7463c980ba4b19ad412c36
    Reviewed-on: https://go-review.googlesource.com/30153
    Run-TryBot: Adam Langley <agl@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>

 src/crypto/ecdsa/ecdsa.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit b30fcbc9f59ca4bf1723eb6743b47fa89b3847a3
Author: Adam Langley <agl@golang.org>
Date:   Thu Apr 14 13:52:56 2016 -0700

    crypto/ecdsa: reject negative inputs.
    
    The fact that crypto/ecdsa.Verify didn't reject negative inputs was a
    mistake on my part: I had unsigned numbers on the brain. However, it
    doesn't generally cause problems. (ModInverse results in zero, which
    results in x being zero, which is rejected.)
    
    The amd64 P-256 code will crash when given a large, negative input.
    
    This fixes both crypto/ecdsa to reject these values and also the P-256
    code to ignore the sign of inputs.
    
    Change-Id: I6370ed7ca8125e53225866f55b616a4022b818f8
    Reviewed-on: https://go-review.googlesource.com/22093
    Run-TryBot: Adam Langley <agl@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>

 src/crypto/ecdsa/ecdsa.go      |  2 +-
 src/crypto/ecdsa/ecdsa_test.go | 23 +++++++++++++++++++++++
 2 files changed, 24 insertions(+), 1 deletion(-)

commit 123b38e105342ca65392ba8e20a089fe405b0791
Author: Adam Langley <agl@golang.org>
Date:   Mon Mar 16 16:42:12 2015 -0700

    crypto/{ecdsa,rsa}: always use io.ReadFull with crypto/rand.Reader.
    
    crypto/rand.Reader doesn't ensure that short reads don't happen. This
    change contains a couple of fixups where io.ReadFull wasn't being used
    with it.
    
    Change-Id: I3855b81f5890f2e703112eeea804aeba07b6a6b8
    Reviewed-on: https://go-review.googlesource.com/7645
    Reviewed-by: Minux Ma <minux@golang.org>
    Reviewed-by: Andrew Gerrand <adg@golang.org>

 src/crypto/ecdsa/ecdsa.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 35b8e511c282a4d03f50dca0570a5f65795926b9
Author: Adam Langley <agl@golang.org>
Date:   Mon Jan 26 22:31:25 2015 +0000

    Revert "crypto/ecdsa: make Sign safe with broken entropy sources"
    
    This reverts commit 8d7bf2291b095d3a2ecaa2609e1101be46d80deb.
    
    Change-Id: Iad2c74a504d64bcf7ca707b00bda29bc796a2ae9
    Reviewed-on: https://go-review.googlesource.com/3320
    Reviewed-by: Adam Langley <agl@golang.org>

 src/crypto/ecdsa/ecdsa.go      | 59 +---------------------------------
 src/crypto/ecdsa/ecdsa_test.go | 72 ------------------------------------------
 2 files changed, 1 insertion(+), 130 deletions(-)
